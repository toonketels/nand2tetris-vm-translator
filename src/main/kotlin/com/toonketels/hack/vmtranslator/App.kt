/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.toonketels.hack.vmtranslator

import com.toonketels.hack.vmtranslator.vmtranslator.MultiFileProgramBuilder
import com.toonketels.hack.vmtranslator.vmtranslator.translateProgram
import java.io.File
import java.lang.StringBuilder
import kotlin.system.exitProcess

fun main(args: Array<String>) {
    try {
        App().translate(args.getOrNull(0))
        exitProcess(0)
    } catch (e: Throwable) {
        println(e.message)
        exitProcess(1)
    }
}


class App {
    fun translate(fileName: String?) {

        if (fileName == null) throw IllegalArgumentException("Please provide a file or directory name")

        // @TODO check for absolute path
        var file = File(fileName)

        val sources = if (file.isDirectory) {
            println("Directory selected is ${file.absolutePath}")

            if (!file.exists()) throw IllegalArgumentException("Directory does not exist")
            if (!file.canRead()) throw IllegalArgumentException("Directory is not readable")

            file
                    .listFiles { file -> file.extension == "vm" }
                    .fold(MultiFileProgramBuilder()) { programBuilder, file -> programBuilder.addFile(file) }
                    .sources
        } else {
            println(("File selected is ${file.absolutePath}"))

            if (file.extension != "vm") throw IllegalArgumentException("File needs to be of type vm")
            if (!file.exists()) throw IllegalArgumentException("File does not exist")
            if (!file.canRead()) throw IllegalArgumentException("File is not readable")

            listOf(file.nameWithoutExtension to file.readText())
        }


        val converted = translateProgram(sources)

        var output = File("${file.nameWithoutExtension}.asm")
        output.writeText(converted)

        println("Created ${output.absolutePath}")
    }

}